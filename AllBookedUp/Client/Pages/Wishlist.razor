@page "/wishlist"
@inject IWishlistService WishlistService
@inject ICartService CartService
@inject IProductService ProductService

<h3>Shopping Cart</h3>

@if (cartItems == null || cartItems.Count <= 0)
{
    <span>You have no items in your wishlist.</span>
}
else
{
    <div>
        @foreach (var item in cartItems)
        {
        <div class="container">
            <div class="image-wrapper">
                <img src="@item.Image" class="image" />
            </div>
            <div class="name">
                <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
            </div>
            <button class="btn-delete" @onclick="@(() => AddItemToCart(item))">Add Item to Cart</button>
            <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Remove from Wishlist</button>
            <div class="cart-product-price">£@item.Price</div>
        </div>
        }
        <div class="cart-product-price">
            Total (@cartItems.Count): £@cartItems.Sum(item => item.Price)
        </div>
    </div>
}

@code {
    List<CartItem> cartItems = new List<CartItem>();

    //Load wishlist items to cartItems
    protected override async Task OnInitializedAsync()
    {
        cartItems = await WishlistService.GetWishlistItems();
    }

    //Delete the item from the wishlist
    private async Task DeleteItem(CartItem item)
    {
        await WishlistService.DeleteItem(item);
        cartItems = await WishlistService.GetWishlistItems();
    }

    //Add the item from wishlist to cart, removing the item from wishlist after
    private async Task AddItemToCart(CartItem item)
    {
        var result = await ProductService.GetProductById((item.ProductId));

        await CartService.AddToCart(result.Data);

        await WishlistService.DeleteItem(item);
        cartItems = await WishlistService.GetWishlistItems();
    }

}
